#!/usr/bin/env python
# Copyright (C) 2016 Hugo Genesse.
# This file is part of VMCloak - http://www.vmcloak.org/.
# See the file 'docs/LICENSE.txt' for copying permission.

import argparse
from json import loads, dumps
from os import path
# from Hide import *
import os

PROFILE_PATH = os.path.join(os.getenv('HOME'), '.vmcloak', 'profiles')


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("--name", type=str, default="hwconf",
                        help="Name of the profile.")
    # parser.add_argument("--key", help="Used for registry keys.")
    parser.add_argument("--modtype", type=str, default="",
                        help="Modification type for regisry and directories.")
    parser.add_argument("--location", type=str, default="",
                        help="Location of the registry key.")
    parser.add_argument("--value", type=str, default="",
                        help="Registry key name.")
    parser.add_argument("--datatype", type=str, default="string",
                        help="Registry data type.")
    parser.add_argument("--data", type=str, default="", help="Key data.")
    # parser.add_argument("--directory", type=str,
    # help="Used for directory manipulation.")
    parser.add_argument("--dirpath", type=str, default="",
                        help="Path of the directory to manipulate.")

    args = parser.parse_args()

    if args.modtype.find("key") != -1:
        """ Dumps the JSON key in a hwconf profile file."""
        d = dict({
            "modification_type": args.modtype,
            "location": args.location,
            "value": args.value,
            "datatype": args.datatype,
            "data": args.data
            })

    elif args.dirpath != "":
        """Handles the JSON keys to specify directories manipulation."""
        print "here"
        d = dict({
            "modification_type": args.modtype,
            "dirpath": args.dirpath
            })

    else:
        """ Manual entry."""
        mod_type = raw_input("Modification type (h for options): ")

        if (mod_type == "h"):
            print "Registry key modifications:"
            print "\t- Add key: add_key"
            print "\t- Delete key: del_key"
            print "\t- Modify key: mod_key"
            print "Directory modifications:"
            print "\t- Add directory: add_dir"
            print "\t- Delete directory: del_dir"
            print "\t- Modify directory: mod_dir"
            mod_type = raw_input("Modification type: ")

        if mod_type.find("key") != -1:
            """ Registry key dictionnary."""
            location = raw_input("Location: ")
            value = raw_input("Value: ")
            data_type = raw_input("Date type: ")
            data = raw_input("Data: ")

            d = dict({
                "modification_type": mod_type,
                "location": location,
                "value": value,
                "datatype": data_type,
                "data": data
                })
        elif mod_type.find("dir") != -1:
            """ Directory modification dictionnary."""
            dirpath = raw_input("Directory path: ")

            d = dict({
                "mod_type": mod_type,
                "dirpath": dirpath
                })

    """ Modified version of :
        http://stackoverflow.com/questions/16245090/file-io-with-defaultdict"""
    try:
        """ Check if profile already exists to avoid overwriting."""
        with open(
                os.path.join(PROFILE_PATH, "%s.json" % args.name),
                "r") as profile:
            profile_content = profile.read()
            if profile_content:
                profile_content = loads(profile_content)
            profile.close()

    except IOError:
        """ New list for a new profile."""
        profile_content = []
    try:
        """ Appends the new key."""
        profile_content.append(d)

    except AttributeError:
        """ Empty file case. """
        profile_content = d

    """ Writes the updated profile."""
    with open(
            os.path.join(PROFILE_PATH, "%s.json" % args.name), "w") as profile:
        profile.write(dumps(profile_content))
        profile.close()

if __name__ == "__main__":

    main()
